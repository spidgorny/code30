{"version":3,"sources":["RuleLine.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RuleLine","state","style","height","this","props","size","whiteSpace","renderLine","bits","line","map","el","index","key","width","display","backgroundColor","React","Component","App","rules","lines","addTwoLines","maxLines","document","body","clientWidth","console","log","i","slow","Promise","resolve","reject","setTimeout","a","addLine","window","scrollTo","length","lastLine","concat","linePlus","set","value","push","setState","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"iPAUaA,G,MAAb,4MAECC,MAAwB,GAFzB,uDAKE,OACC,yBAAKC,MAAO,CACXC,OAAQC,KAAKC,MAAMC,KAAO,KAC1BC,WAAY,QAEXH,KAAKI,WAAWJ,KAAKC,MAAMI,SAVhC,iCAcYC,GAAkB,IAAD,OAC3B,OAAOA,EAAKC,KAAI,SAACC,EAAIC,GACpB,OAAO,yBACNC,IAAK,OAASD,EACdX,MAAO,CACNa,MAAO,EAAKV,MAAMC,KAAO,KACzBH,OAAQ,EAAKE,MAAMC,KAAO,KAC1BU,QAAS,eACTC,gBAAiBL,EAAK,QAAU,6BAtBrC,GAA8BM,IAAMC,YC2ErBC,E,4MA3ELd,KAAO,E,EAEPe,MAAQ,CAChB,KAAO,EACP,KAAO,EACP,KAAO,EACP,KAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,EACP,OAAO,G,EAGRpB,MAAkB,CACjBqB,MAAO,CACN,EAAC,K,kEAKFlB,KAAKmB,gB,sJAIDC,EAAWC,SAASC,KAAKC,YAAcvB,KAAKE,KAAO,EACvDsB,QAAQC,IAAI,WAAYL,GACfM,EAAI,E,YAAGA,EAAIN,G,gCACbpB,KAAK2B,O,OADkBD,I,gSAMvB,IAAIE,SAAQ,SAACC,EAASC,GAC5BC,WAAU,sBAAC,sBAAAC,EAAA,sEACJ,EAAKC,UADD,OAEVJ,IACAK,OAAOC,SAAS,EAAG,EAAKjC,KAAO,EAAKL,MAAMqB,MAAMkB,QAHtC,2CAIR,O,+QAKG,IAAIR,SAAQ,SAACC,EAASC,GAG5B,IAFA,IAAMO,EAAW,EAAC,GAAOC,OAAO,EAAKzC,MAAMqB,MAAM,EAAKrB,MAAMqB,MAAMkB,OAAS,IAAIE,OAAO,EAAC,IACjFC,EAAsB,GACnBb,EAAI,EAAGA,EAAIW,EAASD,OAAQV,IAAK,CACzC,IAGMc,GAHOH,EAASX,EAAI,GAAK,EAAI,GAGhB,IAFNW,EAASX,EAAI,GAAK,EAAI,IACtBW,EAASX,EAAI,GAAK,EAAI,GAG7Be,EAAQ,EAAKxB,MAAMuB,GACzBD,EAASG,KAAKD,GAIf,EAAKE,UAAS,SAAC9C,GAAD,MAAsB,CACnCqB,MAAOrB,EAAMqB,MAAMoB,OAAO,CAACC,OACxBV,O,gIAII,IAAD,OAER,OACC,yBAAKe,UAAU,OACb5C,KAAKH,MAAMqB,MAAMX,KAAI,SAACD,EAAMG,GAAP,OACrB,kBAAC,EAAD,CAAUJ,KAAMC,EAAMI,IAAK,MAAQD,EAAOP,KAAM,EAAKA,e,GArExCY,IAAMC,WCIJ8B,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF9B,SAAS+B,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLpC,QAAQoC,MAAMA,EAAMC,a","file":"static/js/main.32bb2375.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface IRuleLineProps {\n\tsize: number;\n\tbits: boolean[];\n}\n\ninterface IRuleLineState {\n}\n\nexport class RuleLine extends React.Component<IRuleLineProps, IRuleLineState> {\n\n\tstate: IRuleLineState = {};\n\n\trender() {\n\t\treturn (\n\t\t\t<div style={{\n\t\t\t\theight: this.props.size + 'px',\n\t\t\t\twhiteSpace: 'pre',\n\t\t\t}}\n\t\t\t>{this.renderLine(this.props.bits)}</div>\n\t\t);\n\t}\n\n\trenderLine(line: boolean[]) {\n\t\treturn line.map((el, index) => {\n\t\t\treturn <div\n\t\t\t\tkey={'cell' + index}\n\t\t\t\tstyle={{\n\t\t\t\t\twidth: this.props.size + 'px',\n\t\t\t\t\theight: this.props.size + 'px',\n\t\t\t\t\tdisplay: 'inline-block',\n\t\t\t\t\tbackgroundColor: el ? 'black' : 'white !important',\n\t\t\t\t}}/>;\n\t\t});\n\t}\n\n}\n","import React from 'react';\nimport './App.css';\nimport {RuleLine} from \"./RuleLine\";\n\ninterface AppState {\n\tlines: boolean[][];\n}\n\nclass App extends React.Component {\n\n\treadonly size = 4;\n\n\treadonly rules = {\n\t\t'111': false,\n\t\t'110': false,\n\t\t'101': false,\n\t\t'100': true,\n\t\t'011': true,\n\t\t'010': true,\n\t\t'001': true,\n\t\t'000': false,\n\t}\n\n\tstate: AppState = {\n\t\tlines: [\n\t\t\t[true]\n\t\t],\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.addTwoLines();\n\t}\n\n\tasync addTwoLines() {\n\t\tlet maxLines = document.body.clientWidth / this.size / 2;\n\t\tconsole.log('maxLines', maxLines);\n\t\tfor (let i = 0; i < maxLines; i++) {\n\t\t\tawait this.slow();\n\t\t}\n\t}\n\n\tasync slow() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tsetTimeout(async () => {\n\t\t\t\tawait this.addLine();\n\t\t\t\tresolve();\n\t\t\t\twindow.scrollTo(0, this.size * this.state.lines.length);\n\t\t\t}, 1);\n\t\t});\n\t}\n\n\tasync addLine() {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst lastLine = [false].concat(this.state.lines[this.state.lines.length - 1]).concat([false]);\n\t\t\tconst linePlus: boolean[] = [];\n\t\t\tfor (let i = 0; i < lastLine.length; i++) {\n\t\t\t\tconst set1 = lastLine[i - 1] ? 1 : 0;\n\t\t\t\tconst set2 = lastLine[i + 0] ? 1 : 0;\n\t\t\t\tconst set3 = lastLine[i + 1] ? 1 : 0;\n\t\t\t\tconst set = set1 + '' + set2 + '' + set3;\n\t\t\t\t// @ts-ignore\n\t\t\t\tconst value = this.rules[set];\n\t\t\t\tlinePlus.push(value);\n\t\t\t\t// console.log(set);\n\t\t\t}\n\t\t\t// console.log(linePlus.join(','));\n\t\t\tthis.setState((state: AppState) => ({\n\t\t\t\tlines: state.lines.concat([linePlus]),\n\t\t\t}), resolve);\n\t\t});\n\t}\n\n\trender() {\n\t\t// console.log('lines', this.state.lines.length);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t{this.state.lines.map((line, index) =>\n\t\t\t\t\t<RuleLine bits={line} key={'row' + index} size={this.size}/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}